import html
from io import BytesIO
from typing import Optional, List

from telegram import Message, Update, Bot, User, Chat, ParseMode, InlineKeyboardMarkup
from telegram.error import BadRequest, TelegramError
from telegram.ext import run_async, CommandHandler, MessageHandler, Filters
from telegram.utils.helpers import mention_html

import GroupMaster.modules.sql.antispam_sql as sql
from GroupMaster import dispatcher, OWNER_ID, SUDO_USERS, SUPPORT_USERS, STRICT_ANTISPAM
from GroupMaster.modules.helper_funcs.chat_status import user_admin, is_user_admin
from GroupMaster.modules.helper_funcs.extraction import extract_user, extract_user_and_text
from GroupMaster.modules.helper_funcs.filters import CustomFilters
from GroupMaster.modules.helper_funcs.misc import send_to_list
from GroupMaster.modules.sql.users_sql import get_all_chats

from GroupMaster.modules.translations.strings import tld

GBAN_ENFORCE_GROUP = 6

GBAN_ERRORS = {
    "User is an administrator of the chat",
    "Chat not found",
    "Not enough rights to restrict/unrestrict chat member",
    "User_not_participant",
    "Peer_id_invalid",
    "Group chat was deactivated",
    "Need to be inviter of a user to kick it from a basic group",
    "Chat_admin_required",
    "Only the creator of a basic group can kick group administrators",
    "Channel_private",
    "Not in the chat"
}

UNGBAN_ERRORS = {
    "User is an administrator of the chat",
    "Chat not found",
    "Not enough rights to restrict/unrestrict chat member",
    "User_not_participant",
    "Method is available for supergroup and channel chats only",
    "Not in the chat",
    "Channel_private",
    "Chat_admin_required",
}


@run_async
def gban(bot: Bot, update: Update, args: List[str]):
    message = update.effective_message  # type: Optional[Message]

    user_id, reason = extract_user_and_text(message, args)

    if not user_id:
        message.reply_text("B·∫°n d∆∞·ªùng nh∆∞ kh√¥ng ƒë·ªÅ c·∫≠p ƒë·∫øn m·ªôt ng∆∞·ªùi.")
        return

    if int(user_id) in SUDO_USERS:
        message.reply_text("T√¥i theo d√µi, v·ªõi con m·∫Øt nh·ªè c·ªßa t√¥i ... m·ªôt cu·ªôc chi·∫øn ng∆∞·ªùi d√πng sudo! T·∫°i sao c√°c b·∫°n ƒëang b·∫≠t nhau?")
        return

    if int(user_id) in SUPPORT_USERS:
        message.reply_text("Oooh ai ƒë√≥ ƒëang c·ªë g·∫Øng ƒë·ªÉ ng∆∞·ªùi d√πng h·ªó tr·ª£! *l·∫•y b·ªèng ng√¥*")
        return

    if user_id == bot.id:
        message.reply_text("-_- Th·∫≠t bu·ªìn c∆∞·ªùi, h√£y l√† ch√≠nh m√¨nh t·∫°i sao t√¥i ph·∫£i kh√¥ng? H√£y th·ª≠ t·ªët ƒë·∫πp. Tr√°i ƒë·∫•t l√† gi√° c·ªßa t√¥i!")
        return

    try:
        user_chat = bot.get_chat(user_id)
    except BadRequest as excp:
        message.reply_text(excp.message)
        return

    if user_chat.type != 'private':
        message.reply_text("ƒê√≥ kh√¥ng ph·∫£i l√† ng∆∞·ªùi d√πng!")
        return

    if sql.is_user_gbanned(user_id):
        if not reason:
            message.reply_text("Ng∆∞·ªùi n√†y ƒë√£ b·ªã c·∫•m to√†n b·ªô nh√≥m; T√¥i s·∫Ω thay ƒë·ªïi l√Ω do, nh∆∞ng b·∫°n ƒë√£ kh√¥ng cho t√¥i m·ªôt ...")
            return

        old_reason = sql.update_gban_reason(user_id, user_chat.username or user_chat.first_name, reason)
        if old_reason:
            message.reply_text("Ng∆∞·ªùi n√†y ƒë√£ b·ªã c·∫•m, v√¨ l√Ω do sau:\n"
                               "<code>{}</code>\n"
                               "T√¥i ƒë√£ ƒëi v√† c·∫≠p nh·∫≠t n√≥ v·ªõi l√Ω do m·ªõi c·ªßa b·∫°n!".format(html.escape(old_reason)),
                               parse_mode=ParseMode.HTML)
        else:
            message.reply_text("Ng∆∞·ªùi n√†y ƒë√£ b·ªã c·∫•m, nh∆∞ng kh√¥ng c√≥ l√Ω do n√†o; T√¥i ƒë√£ ƒëi v√† c·∫≠p nh·∫≠t n√≥!")

        return
    
    ok123 = mention_html(user_chat.id, user_chat.first_name)


    text12 = f"‚ö°Ô∏èChu·∫©n b·ªã ƒë√° ƒë√≠t s√∫c v·∫≠t {ok123}‚ö°Ô∏è."
    update.effective_message.reply_text(text12, parse_mode=ParseMode.HTML)

    banner = update.effective_user  # type: Optional[User]
    send_to_list(bot, SUDO_USERS + SUPPORT_USERS,
                 "<b>C·∫§M TO√ÄN B·ªò NH√ìM</b>" \
                 "\n#GBAN" \
                 "\n<b>Tr·∫°ng th√°i:</b> <code>ƒêang c·∫•m</code>" \
                 "\n<b>Admin:</b> {}" \
                 "\n<b>Ng∆∞·ªùi d√πng:</b> {}" \
                 "\n<b>ID:</b> <code>{}</code>" \
                 "\n<b>L√Ω do:</b> {}".format(mention_html(banner.id, banner.first_name),
                                              mention_html(user_chat.id, user_chat.first_name), 
                                                           user_chat.id, reason or "Kh√¥ng c√≥ l√≠ do"), 
                html=True)

    sql.gban_user(user_id, user_chat.username or user_chat.first_name, reason)

    chats = get_all_chats()
    for chat in chats:
        chat_id = chat.chat_id

        # Check if this group has disabled gbans
        if not sql.does_chat_gban(chat_id):
            continue

        try:
            bot.kick_chat_member(chat_id, user_id)
        except BadRequest as excp:
            if excp.message in GBAN_ERRORS:
                pass
            else:
                message.reply_text("Could not gban due to: {}".format(excp.message))
                send_to_list(bot, SUDO_USERS + SUPPORT_USERS, "Could not gban due to: {}".format(excp.message))
                sql.ungban_user(user_id)
                return
        except TelegramError:
            pass

    send_to_list(bot, SUDO_USERS + SUPPORT_USERS,
                   "{} ƒë√£ b·ªã c·∫•m th√†nh c√¥ng!".format(mention_html(user_chat.id, user_chat.first_name)),
                   html=True)
    text13 = f"C·∫•m {ok123} th√†nh c√¥ng, ƒë√£ c·∫•m kh·ªèi 49 nh√≥m."
    update.effective_message.reply_text(text13, parse_mode=ParseMode.HTML)


@run_async
def ungban(bot: Bot, update: Update, args: List[str]):
    message = update.effective_message  # type: Optional[Message]

    user_id = extract_user(message, args)
    if not user_id:
        message.reply_text("B·∫°n d∆∞·ªùng nh∆∞ kh√¥ng ƒë·ªÅ c·∫≠p ƒë·∫øn m·ªôt ng∆∞·ªùi.")
        return

    user_chat = bot.get_chat(user_id)
    if user_chat.type != 'private':
        message.reply_text("ƒê√≥ kh√¥ng ph·∫£i l√† m·ªôt ng∆∞·ªùi!")
        return

    if not sql.is_user_gbanned(user_id):
        message.reply_text("Ng∆∞·ªùi n√†y kh√¥ng b·ªã c·∫•m!")
        return

    banner = update.effective_user  # type: Optional[User]

    message.reply_text("T√¥ s·∫Ω cho {} m·ªôt c∆° h·ªôi th·ª© hai, to√†n c·∫ßu. T√¥i kh√¥ng y√™u c·∫ßu s·ª± tin t∆∞·ªüng c·ªßa b·∫°n. T√¥i ch·ªâ y√™u c·∫ßu s·ª± v√¢ng l·ªùi c·ªßa b·∫°n.".format(user_chat.first_name))

    send_to_list(bot, SUDO_USERS + SUPPORT_USERS,
                 "<b>G·ª† C·∫§M TO√ÄN B·ªò NH√ìM</b>" \
                 "\n#UNGBAN" \
                 "\n<b>Status:</b> <code>Ch·∫•m d·ª©t</code>" \
                 "\n<b>Admin:</b> {}" \
                 "\n<b>User:</b> {}" \
                 "\n<b>ID:</b> <code>{}</code>".format(mention_html(banner.id, banner.first_name),
                                                       mention_html(user_chat.id, user_chat.first_name), 
                                                                    user_chat.id),
                html=True)

    chats = get_all_chats()
    for chat in chats:
        chat_id = chat.chat_id

        # Check if this group has disabled gbans
        if not sql.does_chat_gban(chat_id):
            continue

        try:
            member = bot.get_chat_member(chat_id, user_id)
            if member.status == 'kicked':
                bot.unban_chat_member(chat_id, user_id)

        except BadRequest as excp:
            if excp.message in UNGBAN_ERRORS:
                pass
            else:
                message.reply_text("Could not un-gban due to: {}".format(excp.message))
                bot.send_message(OWNER_ID, "Could not un-gban due to: {}".format(excp.message))
                return
        except TelegramError:
            pass

    sql.ungban_user(user_id)

    send_to_list(bot, SUDO_USERS + SUPPORT_USERS,
                  "{} ƒë√£ ƒë∆∞·ª£c b·ªè c·∫•m th√†nh c√¥ng!".format(mention_html(user_chat.id,
                                                                         user_chat.first_name)),
                 html=True)

    message.reply_text("Ng∆∞·ªùi ƒë√£ b·ªã c·∫•m. L·ª±a ch·ªçn kh√≥ nh·∫•t ƒë√≤i h·ªèi √Ω ch√≠ m·∫°nh nh·∫•t. üòê")



@run_async
def gbanlist(bot: Bot, update: Update):
    banned_users = sql.get_gban_list()

    if not banned_users:
        update.effective_message.reply_text("Kh√¥ng c√≥ b·∫•t k·ª≥ ng∆∞·ªùi d√πng b·ªã c·∫•m! B·∫°n t·ªët h∆°n t√¥i mong ƒë·ª£i ...")
        return

    banfile = 'Screw these guys.\n'
    for user in banned_users:
        banfile += "[x] {} - {}\n".format(user["name"], user["user_id"])
        if user["reason"]:
            banfile += "Reason: {}\n".format(user["reason"])

    with BytesIO(str.encode(banfile)) as output:
        output.name = "gbanlist.txt"
        update.effective_message.reply_document(document=output, filename="gbanlist.txt",
                                                caption="Here is the list of currently gbanned users.")


def check_and_ban(update, user_id, should_message=True):
    if sql.is_user_gbanned(user_id):
        update.effective_chat.kick_member(user_id)
        if should_message:
            update.effective_message.reply_text("Con s√∫c v·∫≠t n√†y c√∫t ra kh·ªèi nh√≥m c·ªßa b·ªë ngay!")

#GMUTE

@run_async
def gmute(bot: Bot, update: Update, args: List[str]):
    message = update.effective_message  # type: Optional[Message]

    user_id, reason = extract_user_and_text(message, args)

    if not user_id:
        message.reply_text("B·∫°n d∆∞·ªùng nh∆∞ kh√¥ng ƒë·ªÅ c·∫≠p ƒë·∫øn m·ªôt ng∆∞·ªùi.")
        return

    if int(user_id) in SUDO_USERS:
        message.reply_text("T√¥i theo d√µi, v·ªõi con m·∫Øt nh·ªè c·ªßa t√¥i ... m·ªôt cu·ªôc chi·∫øn ng∆∞·ªùi d√πng sudo! T·∫°i sao c√°c b·∫°n ƒëang b·∫≠t nhau?")
        return

    if int(user_id) in SUPPORT_USERS:
        message.reply_text("Oooh ai ƒë√≥ ƒëang c·ªë g·∫Øng gmute m·ªôt ng∆∞·ªùi d√πng h·ªó tr·ª£! *l·∫•y b·ªèng ng√¥*")
        return

    if user_id == bot.id:
        message.reply_text("-_- Th·∫≠t bu·ªìn c∆∞·ªùi, h√£y t·∫Øt ti·∫øng ch√≠nh m√¨nh T·∫°i sao ph·∫£i kh√¥ng? H√£y th·ª≠ t·ªët ƒë·∫πp.")
        return

    try:
        user_chat = bot.get_chat(user_id)
    except BadRequest as excp:
        message.reply_text(excp.message)
        return

    if user_chat.type != 'private':
        message.reply_text("ƒê√≥ kh√¥ng ph·∫£i l√† ng∆∞·ªùi d√πng!")
        return

    if sql.is_user_gmuted(user_id):
        if not reason:
            message.reply_text("Ng∆∞·ªùi d√πng n√†y ƒë√£ b·ªã t·∫Øt ti·∫øng; T√¥i s·∫Ω thay ƒë·ªïi l√Ω do, nh∆∞ng b·∫°n ƒë√£ kh√¥ng cho t√¥i m·ªôt ...")
            return

        success = sql.update_gmute_reason(user_id, user_chat.username or user_chat.first_name, reason)
        if success:
            message.reply_text("Ng∆∞·ªùi d√πng n√†y ƒë√£ b·ªã t·∫Øt ti·∫øng; T√¥i ƒë√£ ƒëi v√† c·∫≠p nh·∫≠t l√Ω do GMUTE!")
        else:
            message.reply_text("B·∫°n c√≥ phi·ªÅn th·ª≠ l·∫°i kh√¥ng? T√¥i nghƒ© r·∫±ng ng∆∞·ªùi n√†y ƒë√£ b·ªã t·∫Øt ti·∫øng, nh∆∞ng sau ƒë√≥ h·ªç kh√¥ng? "
                               "T√¥i r·∫•t b·ªëi r·ªëi")

        return

    message.reply_text("*Ti·ªÉu nh·ªã, chu·∫©n b·ªã bƒÉng keo* üòâ")

    muter = update.effective_user  # type: Optional[User]
    send_to_list(bot, SUDO_USERS + SUPPORT_USERS,
                 "{} ƒë√£ t·∫Øt chat {} "
                 "t·∫°i v√¨:\n{}".format(mention_html(muter.id, muter.first_name),
                                       mention_html(user_chat.id, user_chat.first_name), reason or "Th√≠ch"),
                 html=True)

    sql.gmute_user(user_id, user_chat.username or user_chat.first_name, reason)

    chats = get_all_chats()
    for chat in chats:
        chat_id = chat.chat_id

        # Check if this group has disabled gmutes
        if not sql.does_chat_gban(chat_id):
            continue

        try:
            bot.restrict_chat_member(chat_id, user_id, can_send_messages=False)
        except BadRequest as excp:
            if excp.message == "User is an administrator of the chat":
                pass
            elif excp.message == "Chat not found":
                pass
            elif excp.message == "Not enough rights to restrict/unrestrict chat member":
                pass
            elif excp.message == "User_not_participant":
                pass
            elif excp.message == "Peer_id_invalid":  # Suspect this happens when a group is suspended by telegram.
                pass
            elif excp.message == "Group chat was deactivated":
                pass
            elif excp.message == "Need to be inviter of a user to kick it from a basic group":
                pass
            elif excp.message == "Chat_admin_required":
                pass
            elif excp.message == "Only the creator of a basic group can kick group administrators":
                pass
            elif excp.message == "Method is available only for supergroups":
                pass
            elif excp.message == "Can't demote chat creator":
                pass
            else:
                message.reply_text("Could not gmute due to: {}".format(excp.message))
                send_to_list(bot, SUDO_USERS + SUPPORT_USERS, "Could not gmute due to: {}".format(excp.message))
                sql.ungmute_user(user_id)
                return
        except TelegramError:
            pass

    send_to_list(bot, SUDO_USERS + SUPPORT_USERS, "GMUTE HO√ÄN TH√ÄNH!")
    message.reply_text("Ng∆∞·ªùi n√†y ƒë√£ b·ªã gmuted.")


@run_async
def ungmute(bot: Bot, update: Update, args: List[str]):
    message = update.effective_message  # type: Optional[Message]

    user_id = extract_user(message, args)
    if not user_id:
        message.reply_text("B·∫°n d∆∞·ªùng nh∆∞ kh√¥ng ƒë·ªÅ c·∫≠p ƒë·∫øn m·ªôt ng∆∞·ªùi d√πng.")
        return

    user_chat = bot.get_chat(user_id)
    if user_chat.type != 'private':
        message.reply_text("ƒê√≥ kh√¥ng ph·∫£i l√† ng∆∞·ªùi d√πng!")
        return

    if not sql.is_user_gmuted(user_id):
        message.reply_text("Ng∆∞·ªùi d√πng n√†y kh√¥ng b·ªã Gmuted!")
        return

    muter = update.effective_user  # type: Optional[User]

    message.reply_text("T√¥i s·∫Ω cho ph√©p {} chat l·∫°i, to√†n c·∫ßu.".format(user_chat.first_name))

    send_to_list(bot, SUDO_USERS + SUPPORT_USERS,
                 "{} c√≥ ng∆∞·ªùi d√πng kh√¥ng kh√©o l√©o {}".format(mention_html(muter.id, muter.first_name),
                                                   mention_html(user_chat.id, user_chat.first_name)),
                 html=True)

    chats = get_all_chats()
    for chat in chats:
        chat_id = chat.chat_id

        # Check if this group has disabled gmutes
        if not sql.does_chat_gban(chat_id):
            continue

        try:
            member = bot.get_chat_member(chat_id, user_id)
            if member.status == 'restricted':
                bot.restrict_chat_member(chat_id, int(user_id),
                                     can_send_messages=True,
                                     can_send_media_messages=True,
                                     can_send_other_messages=True,
                                     can_add_web_page_previews=True)

        except BadRequest as excp:
            if excp.message == "User is an administrator of the chat":
                pass
            elif excp.message == "Chat not found":
                pass
            elif excp.message == "Not enough rights to restrict/unrestrict chat member":
                pass
            elif excp.message == "User_not_participant":
                pass
            elif excp.message == "Method is available for supergroup and channel chats only":
                pass
            elif excp.message == "Not in the chat":
                pass
            elif excp.message == "Channel_private":
                pass
            elif excp.message == "Chat_admin_required":
                pass
            else:
                message.reply_text("Could not un-gmute due to: {}".format(excp.message))
                bot.send_message(OWNER_ID, "Could not un-gmute due to: {}".format(excp.message))
                return
        except TelegramError:
            pass

    sql.ungmute_user(user_id)

    send_to_list(bot, SUDO_USERS + SUPPORT_USERS, "Un-gmute ho√†n th√†nh!")

    message.reply_text("Ng∆∞·ªùi ƒë√£ kh√¥ng ƒë∆∞·ª£c unmute")


@run_async
def gmutelist(bot: Bot, update: Update):
    muted_users = sql.get_gmute_list()

    if not muted_users:
        update.effective_message.reply_text("Kh√¥ng c√≥ b·∫•t k·ª≥ ng∆∞·ªùi d√πng Gmuted n√†o! B·∫°n t·ªët h∆°n t√¥i mong ƒë·ª£i ...")
        return

    mutefile = 'Screw these guys.\n'
    for user in muted_users:
        mutefile += "[x] {} - {}\n".format(user["name"], user["user_id"])
        if user["reason"]:
            mutefile += "Reason: {}\n".format(user["reason"])

    with BytesIO(str.encode(mutefile)) as output:
        output.name = "gmutelist.txt"
        update.effective_message.reply_document(document=output, filename="gmutelist.txt",
                                                caption="D∆∞·ªõi ƒë√¢y l√† danh s√°ch nh·ªØng ng∆∞·ªùi d√πng hi·ªán ƒëang ƒë∆∞·ª£c Gmuted.")


def check_and_mute(bot, update, user_id, should_message=True):
    if sql.is_user_gmuted(user_id):
        bot.restrict_chat_member(update.effective_chat.id, user_id, can_send_messages=False)
        if should_message:
            update.effective_message.reply_text("This is a bad person, I'll silence them for you!")


@run_async
def enforce_gmute(bot: Bot, update: Update):
    # Not using @restrict handler to avoid spamming - just ignore if cant gmute.
    if sql.does_chat_gban(update.effective_chat.id) and update.effective_chat.get_member(bot.id).can_restrict_members:
        user = update.effective_user  # type: Optional[User]
        chat = update.effective_chat  # type: Optional[Chat]
        msg = update.effective_message  # type: Optional[Message]

        if user and not is_user_admin(chat, user.id):
            check_and_mute(bot, update, user.id, should_message=True)
        if msg.new_chat_members:
            new_members = update.effective_message.new_chat_members
            for mem in new_members:
                check_and_mute(bot, update, mem.id, should_message=True)
        if msg.reply_to_message:
            user = msg.reply_to_message.from_user  # type: Optional[User]
            if user and not is_user_admin(chat, user.id):
                check_and_mute(bot, update, user.id, should_message=True)


@run_async
def enforce_gban(bot: Bot, update: Update):
    # Not using @restrict handler to avoid spamming - just ignore if cant gban.
    if sql.does_chat_gban(update.effective_chat.id) and update.effective_chat.get_member(bot.id).can_restrict_members:
        user = update.effective_user  # type: Optional[User]
        chat = update.effective_chat  # type: Optional[Chat]
        msg = update.effective_message  # type: Optional[Message]

        if user and not is_user_admin(chat, user.id):
            check_and_ban(update, user.id)

        if msg.new_chat_members:
            new_members = update.effective_message.new_chat_members
            for mem in new_members:
                check_and_ban(update, mem.id)

        if msg.reply_to_message:
            user = msg.reply_to_message.from_user  # type: Optional[User]
            if user and not is_user_admin(chat, user.id):
                check_and_ban(update, user.id, should_message=False)


@run_async
@user_admin
def antispam(bot: Bot, update: Update, args: List[str]):
    chat = update.effective_chat  # type: Optional[Chat]
    if len(args) > 0:
        if args[0].lower() in ["on", "yes"]:
            sql.enable_antispam(chat.id)
            update.effective_message.reply_text(tld(chat.id, "T√¥i ƒë√£ k√≠ch ho·∫°t an ninh Antispam trong nh√≥m n√†y. ƒêi·ªÅu n√†y s·∫Ω gi√∫p b·∫£o v·ªá b·∫°n "
                                                "t·ª´ nh·ªØng k·∫ª g·ª≠i th∆∞ r√°c, nh√¢n v·∫≠t kh√¥ng ƒë√°ng k√≠nh v√† nh·ªØng con troll l·ªõn nh·∫•t."))
        elif args[0].lower() in ["off", "no"]:
            sql.disable_antispam(chat.id)
            update.effective_message.reply_text(tld(chat.id, "T√¥i ƒë√£ v√¥ hi·ªáu h√≥a an ninh Antispam trong nh√≥m n√†y. GBANS s·∫Ω kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn ng∆∞·ªùi d√πng c·ªßa b·∫°n "
                                                "n·ªØa kh√¥ng. B·∫°n s·∫Ω √≠t ƒë∆∞·ª£c b·∫£o v·ªá kh·ªèi b·∫•t k·ª≥ troll v√† k·∫ª g·ª≠i th∆∞ r√°c "
                                                "m·∫∑c d√π! V√† t√¥i h∆°i th·∫•t v·ªçng qu√°. üò∂"))
    else:
        update.effective_message.reply_text(tld(chat.id, "H√£y cho t√¥i m·ªôt s·ªë ƒë·ªëi s·ªë ƒë·ªÉ ch·ªçn m·ªôt thi·∫øt l·∫≠p! on/off, yes/no!\n\n"
                                            "C√†i ƒë·∫∑t hi·ªán t·∫°i c·ªßa b·∫°n l√†: {}\n"
                                            "Khi True, B·∫•t k·ª≥ GBAN n√†o x·∫£y ra c≈©ng s·∫Ω x·∫£y ra trong nh√≥m c·ªßa b·∫°n. "
                                            "Khi False, h·ªç s·∫Ω kh√¥ng, ƒë·ªÉ l·∫°i cho b·∫°n s·ª± th∆∞∆°ng x√≥t c√≥ th·ªÉ "
                                            "spammers.").format(sql.does_chat_gban(chat.id)))

#Gkick

GKICK_ERRORS = {
    "User is an administrator of the chat",
    "Chat not found",
    "Not enough rights to restrict/unrestrict chat member",
    "User_not_participant",
    "Peer_id_invalid",
    "Group chat was deactivated",
    "Need to be inviter of a user to kick it from a basic group",
    "Chat_admin_required",
    "Only the creator of a basic group can kick group administrators",
    "Channel_private",
    "Not in the chat",
    "Method is available for supergroup and channel chats only",
    "Reply message not found"
}

@run_async
def gkick(bot: Bot, update: Update, args: List[str]):
    message = update.effective_message
    user_id = extract_user(message, args)
    try:
        user_chat = bot.get_chat(user_id)
    except BadRequest as excp:
        if excp.message in GKICK_ERRORS:
            pass
        else:
            message.reply_text("Ng∆∞·ªùi d√πng kh√¥ng th·ªÉ b·ªã ƒë√° tr√™n to√†n c·∫ßu v√¨: {}".format(excp.message))
            return
    except TelegramError:
            pass

    if not user_id:
        message.reply_text("B·∫°n d∆∞·ªùng nh∆∞ kh√¥ng ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p ƒë·∫øn m·ªôt ng∆∞·ªùi")
        return
    if int(user_id) in SUDO_USERS or int(user_id) in SUPPORT_USERS:
        message.reply_text("OHHH! Someone's trying to gkick a sudo/support user! *Grabs popcorn*")
        return
    if int(user_id) == OWNER_ID:
        message.reply_text("Wow! Some's trying to gkick my owner! *Grabs Potato Chips*")
        return
        
    if user_id == bot.id:
        message.reply_text("Ch√†, t√¥i s·∫Ω kh√¥ng t·ª± Gkick!")
        return

    if int(user_id) in SUDO_USERS:
        message.reply_text("")
        return

    chats = get_all_chats()
    message.reply_text("ƒê√° @{} kh·ªèi to√†n b·ªô nh√≥m".format(user_chat.username))
    for chat in chats:
        try:
            bot.unban_chat_member(chat.chat_id, user_id)  # Unban_member = kick (and not ban)
        except BadRequest as excp:
            if excp.message in GKICK_ERRORS:
                pass
            else:
                message.reply_text("Ng∆∞·ªùi kh√¥ng th·ªÉ b·ªã ƒë√° tr√™n to√†n c·∫ßu v√¨: {}".format(excp.message))
                return
        except TelegramError:
            pass


def __stats__():
    return "{} c·∫•m to√†n c·∫ßu.\n{} t·∫Øt ch√°t to√†n c·∫ßu.".format(sql.num_gbanned_users(), sql.num_gmuted_users())
    


def __user_info__(user_id, chat_id):
    is_gbanned = sql.is_user_gbanned(user_id)
    is_gmuted = sql.is_user_gmuted(user_id)

    if not user_id in SUDO_USERS:

        text = tld(chat_id, "C·∫•m to√†n c·∫ßu: <b>{}</b>")
        if is_gbanned:
            text = text.format(tld(chat_id, "Yes"))
            user = sql.get_gbanned_user(user_id)
            if user.reason:
                text += tld(chat_id, "\nL√Ω do: {}").format(html.escape(user.reason))
        else:
            text = text.format(tld(chat_id, "No"))
        
        text += tld(chat_id, "\nT·∫Øt chat to√†n c·∫ßu: <b>{}</b>")
        if is_gmuted:
            text = text.format(tld(chat_id, "Yes"))
            user = sql.get_gmuted_user(user_id)
            if user.reason:
                text += tld(chat_id, "\nL√Ω do: {}").format(html.escape(user.reason))
        else:
            text = text.format(tld(chat_id, "No"))

        return text
    else:
        return ""


def __migrate__(old_chat_id, new_chat_id):
    sql.migrate_chat(old_chat_id, new_chat_id)


def __chat_settings__(bot, update, chat, chatP, user):
    chat_id = chat.id
    return "Tr√≤ chuy·ªán n√†y ƒëang th·ª±c thi *GBAN*: `{}`.".format(sql.does_chat_gban(chat_id))


__help__ = """
*Admin only:*
 - /antispam <on/off/yes/no>: S·∫Ω v√¥ hi·ªáu h√≥a an ninh Antispam trong nh√≥m ho·∫∑c tr·∫£ v·ªÅ c√†i ƒë·∫∑t hi·ªán t·∫°i c·ªßa b·∫°n.

Antispam ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi c√°c ch·ªß s·ªü h·ªØu bot ƒë·ªÉ c·∫•m nh·ªØng k·∫ª g·ª≠i th∆∞ r√°c tr√™n t·∫•t c·∫£ c√°c nh√≥m. ƒêi·ªÅu n√†y gi√∫p b·∫£o v·ªá \
B·∫°n v√† c√°c nh√≥m c·ªßa b·∫°n b·∫±ng c√°ch lo·∫°i b·ªè l≈© spam c√†ng nhanh c√†ng t·ªët. H·ªç c√≥ th·ªÉ b·ªã v√¥ hi·ªáu h√≥a cho nh√≥m b·∫°n b·∫±ng c√°ch g·ªçi \
/antispam
"""

__mod_name__ = "Antispam üëø"

ANTISPAM_STATUS = CommandHandler("antispam", antispam, pass_args=True, filters=Filters.group)

GBAN_HANDLER = CommandHandler("gban", gban, pass_args=True,
                              filters=CustomFilters.sudo_filter | CustomFilters.support_filter)
UNGBAN_HANDLER = CommandHandler("ungban", ungban, pass_args=True,
                                filters=CustomFilters.sudo_filter | CustomFilters.support_filter)
GBAN_LIST = CommandHandler("gbanlist", gbanlist,
                           filters=CustomFilters.sudo_filter | CustomFilters.support_filter)
GBAN_ENFORCER = MessageHandler(Filters.all & Filters.group, enforce_gban)


GMUTE_HANDLER = CommandHandler("gmute", gmute, pass_args=True,
                              filters=CustomFilters.sudo_filter | CustomFilters.support_filter)
UNGMUTE_HANDLER = CommandHandler("ungmute", ungmute, pass_args=True,
                                filters=CustomFilters.sudo_filter | CustomFilters.support_filter)
GMUTE_LIST = CommandHandler("gmutelist", gmutelist,
                           filters=CustomFilters.sudo_filter | CustomFilters.support_filter)


GKICK_HANDLER = CommandHandler("gkick", gkick, pass_args=True,
                              filters=CustomFilters.sudo_filter | CustomFilters.support_filter)

dispatcher.add_handler(ANTISPAM_STATUS)

dispatcher.add_handler(GBAN_HANDLER)
dispatcher.add_handler(UNGBAN_HANDLER)
dispatcher.add_handler(GBAN_LIST)

dispatcher.add_handler(GMUTE_HANDLER)
dispatcher.add_handler(UNGMUTE_HANDLER)
dispatcher.add_handler(GMUTE_LIST)

dispatcher.add_handler(GKICK_HANDLER)


if STRICT_ANTISPAM:  # enforce GBANS if this is set
    dispatcher.add_handler(GBAN_ENFORCER, GBAN_ENFORCE_GROUP)
